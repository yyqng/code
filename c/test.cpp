//#define NDEBUG
#include <stdio.h>  
#include <stdint.h>  
#include <stdlib.h>  
#include <math.h>  
#include <limits.h>  
#include <assert.h>
#include "hmtest.h"
//c99 -xc - -lm -g -Wall -include stdio.h -O3 << '---' 
//int main(){printf("Hello from the command line.\n");} 
//---
//./a.out

//cat txt |c99 -xc - -lm -g -Wall -include stdio.h -O3
//./a.out

/** \page onewordtag My page
 * My page content
*/

//// below generated by : DoxAuthor
/**
 * @file test.c
 * @brief This is my test.c file of book 21st Century C
 * @author yyqng
 * @version 0.01
 * @date 2020-1-11
 */
 
//// below generated by : 'Dox ' command in vim
/**
 * @brief
 * This is doxygen_test()
 * @param a
 * This is parm a
 * @param b
 * This is parm b
 * @return
 * return int value
 */
int doxygen_test(int a ,int b)
{
//// below generated by : 'DoxBlock' command in vim
    /**
     * @name
     * @{ */
    /**  @} */
    a++;
    return a;
}

/**
 * @brief
 * This is void print_env()
 * @param a
 * No parm a
 * @return
 * return void value
 */
//reps=10 msg="Ha" ./test
void print_env()
{
    printf("print test1  "
           "print test2\n");
    char *repstext = getenv("reps");
    int reps = repstext ? atoi(repstext) : 2;

    const char *msg = getenv("msg");
    if (!msg) {
        msg = "Hello.";
    }

    for (int i=0; i < reps; i++)
        printf("%s\n", msg);
}

/**
 * @brief
 * This is void print_env2()
 * @param a
 * No parm a
 * @return
 * return void value
 */
void print_env2()
{
}
void switch_case0(int input)
{
    switch (input) {
        case 1:
            printf("1\n");
            printf("111\n");
            break;
        case 2:
            printf("2\n");
            printf("222\n");
            break;
        case 3:
            printf("3\n");
            printf("333\n");
            break;
        default:
            printf("0\n");
            printf("000\n");
            break;
            break;
    }
}
void switch_case_test()
{
    switch_case0(1);
    switch_case0(2);
    switch_case0(15);
}

typedef struct strc_bak{
    int key1;
    int key2;
}Strc_bak;

typedef struct strc_test{
    int key1;
    int key2;
    Strc_bak bk;
}Strc_test;

#define _BACKUP_PARAM(p, v) (p).bk.v=(p).v
void define_test()
{
    Strc_test str;
    str.key1 = 1;
    str.key2 = 2;
    printf("key1 = %d\n", str.key1);
    printf("key2 = %d\n", str.key2);
    _BACKUP_PARAM(str, key1);
    printf("key1 = %d"
            " great   test\n", str.bk.key1);
    _BACKUP_PARAM(str, key2);
    printf("key2 = %d\n", str.bk.key2);
}


int luaO_log2 (unsigned int x) {
  //static const lu_byte log_2[256] = {
  static const unsigned char log_2[256] = {
    0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
    6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
  };
  int l = -1;
  while (x >= 256) { l += 8; x >>= 8; }
  int ret = l + log_2[x];
  printf("luaO_log2(%d) = %d\n", x, ret);
  return ret;

}

int main()
{
//    hm_test();
//    assert(0);
    //exit(3);
    //abort();
    //int *p = (int*)malloc(sizeof(int));
    //free(p);
    //switch_case_test();
    //print_env();
    //define_test();
    //luaO_log2(1);
    //luaO_log2(2);
    //luaO_log2(4);
    //luaO_log2(8);
    //luaO_log2(128);
    //luaO_log2(256);
    //luaO_log2(257);
    //luaO_log2(258);
    //luaO_log2(259);
    int *p = NULL;
    if ((p = NULL))
        printf("p is NULL");
}
